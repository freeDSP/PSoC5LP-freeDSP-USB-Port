ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	MIDI_IDENTITY_REPLY
  19              		.section	.rodata
  20              		.align	2
  21              		.type	MIDI_IDENTITY_REPLY, %object
  22              		.size	MIDI_IDENTITY_REPLY, 14
  23              	MIDI_IDENTITY_REPLY:
  24 0000 F0       		.byte	-16
  25 0001 7E       		.byte	126
  26 0002 7F       		.byte	127
  27 0003 06       		.byte	6
  28 0004 02       		.byte	2
  29 0005 7D       		.byte	125
  30 0006 B4       		.byte	-76
  31 0007 04       		.byte	4
  32 0008 32       		.byte	50
  33 0009 D2       		.byte	-46
  34 000a 01       		.byte	1
  35 000b 00       		.byte	0
  36 000c 00       		.byte	0
  37 000d 00       		.byte	0
  38              		.global	usbActivityCounter
  39 000e 0000     		.bss
  40              		.type	usbActivityCounter, %object
  41              		.size	usbActivityCounter, 1
  42              	usbActivityCounter:
  43 0000 00       		.space	1
  44              		.global	csButtStates
  45              		.type	csButtStates, %object
  46              		.size	csButtStates, 1
  47              	csButtStates:
  48 0001 00       		.space	1
  49              		.global	csButtStatesOld
  50              		.type	csButtStatesOld, %object
  51              		.size	csButtStatesOld, 1
  52              	csButtStatesOld:
  53 0002 00       		.space	1
  54              		.global	csButtChange
  55              		.type	csButtChange, %object
  56              		.size	csButtChange, 1
  57              	csButtChange:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 2


  58 0003 00       		.space	1
  59              		.global	inqFlagsOld
  60              		.type	inqFlagsOld, %object
  61              		.size	inqFlagsOld, 1
  62              	inqFlagsOld:
  63 0004 00       		.space	1
  64              		.section	.text.SleepIsr,"ax",%progbits
  65              		.align	2
  66              		.global	SleepIsr
  67              		.thumb
  68              		.thumb_func
  69              		.type	SleepIsr, %function
  70              	SleepIsr:
  71              	.LFB63:
  72              		.file 1 ".\\main.c"
   1:.\main.c      **** /*******************************************************************************
   2:.\main.c      **** * File Name: main.c
   3:.\main.c      **** *
   4:.\main.c      **** * Version: 1.0
   5:.\main.c      **** *
   6:.\main.c      **** * Description:
   7:.\main.c      **** *  This example project demonstrates the MIDI interface device operation.  The 
   8:.\main.c      **** *  project enumerates as a USB Audio Device with the MIDI feature and does not 
   9:.\main.c      **** *  require additional drivers. The main goal of the USB MIDI interface is to 
  10:.\main.c      **** *  transfer and convert MIDI data between external MIDI devices that use the 
  11:.\main.c      **** *  UART interface, and a PC through the USB bus.			
  12:.\main.c      **** *   
  13:.\main.c      **** * Related Document:
  14:.\main.c      **** *  Universal Serial Bus Specification Revision 2.0 
  15:.\main.c      **** *  Universal Serial Bus Device Class Definition for MIDI Devices Release 1.0
  16:.\main.c      **** *  MIDI 1.0 Detailed Specification Document Version 4.2
  17:.\main.c      **** *
  18:.\main.c      **** ********************************************************************************
  19:.\main.c      **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  20:.\main.c      **** * This software is owned by Cypress Semiconductor Corporation and is protected
  21:.\main.c      **** * by and subject to worldwide patent and copyright laws and treaties.
  22:.\main.c      **** * Therefore, you may use this software only as provided in the license agreement
  23:.\main.c      **** * accompanying the software package from which you obtained this software.
  24:.\main.c      **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  25:.\main.c      **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  26:.\main.c      **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  27:.\main.c      **** *******************************************************************************/
  28:.\main.c      **** 
  29:.\main.c      **** #include <project.h>
  30:.\main.c      **** 
  31:.\main.c      **** #define BUTT1	                (0x01u)
  32:.\main.c      **** #define BUTT2	                (0x02u)
  33:.\main.c      **** 
  34:.\main.c      **** #define DEVICE                  (0u)
  35:.\main.c      **** #define MIDI_MSG_SIZE           (4u)
  36:.\main.c      **** 
  37:.\main.c      **** /*MIDI Message Fields */
  38:.\main.c      **** #define MIDI_MSG_TYPE           (0u)
  39:.\main.c      **** #define MIDI_NOTE_NUMBER        (1u)
  40:.\main.c      **** #define MIDI_NOTE_VELOCITY      (2u)
  41:.\main.c      **** 
  42:.\main.c      **** /* MIDI Notes*/
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 3


  43:.\main.c      **** #define NOTE_72                 (72u)
  44:.\main.c      **** #define NOTE_76                 (76u)
  45:.\main.c      **** 
  46:.\main.c      **** /* MIDI Notes Velocity*/
  47:.\main.c      **** #define VOLUME_OFF              (0u)
  48:.\main.c      **** #define VOLUME_ON               (100u)
  49:.\main.c      **** 
  50:.\main.c      **** #define USB_SUSPEND_TIMEOUT     (2u)
  51:.\main.c      **** 
  52:.\main.c      **** /* Identity Reply message */
  53:.\main.c      **** const uint8 CYCODE MIDI_IDENTITY_REPLY[] = {
  54:.\main.c      ****     0xF0u,      /* SysEx */
  55:.\main.c      ****     0x7Eu,      /* Non-real time */
  56:.\main.c      ****     0x7Fu,      /* ID of target device (7F - "All Call") */
  57:.\main.c      ****     0x06u,      /* Sub-ID#1 - General Information */
  58:.\main.c      ****     0x02u,      /* Sub-ID#2 - Identity Reply */
  59:.\main.c      ****     0x7Du,      /* Manufacturer's ID: 7D - Educational Use */
  60:.\main.c      ****     0xB4u, 0x04u,               /* Family code */
  61:.\main.c      ****     0x32u, 0xD2u,               /* Model number */
  62:.\main.c      ****     0x01u, 0x00u, 0x00u, 0x00u, /* Version number */
  63:.\main.c      ****     /*0xF7         End of SysEx automatically appended */
  64:.\main.c      **** };
  65:.\main.c      **** 
  66:.\main.c      **** /* Need for Identity Reply message */
  67:.\main.c      **** extern volatile uint8 USB_MIDI1_InqFlags;
  68:.\main.c      **** extern volatile uint8 USB_MIDI2_InqFlags;
  69:.\main.c      **** 
  70:.\main.c      **** volatile uint8 usbActivityCounter = 0u;
  71:.\main.c      **** 
  72:.\main.c      **** uint8 csButtStates = 0u;
  73:.\main.c      **** uint8 csButtStatesOld = 0u;
  74:.\main.c      **** uint8 csButtChange = 0u;
  75:.\main.c      **** uint8 inqFlagsOld = 0u;
  76:.\main.c      **** 
  77:.\main.c      **** 
  78:.\main.c      **** /*******************************************************************************
  79:.\main.c      **** * Function Name: SleepIsr
  80:.\main.c      **** ********************************************************************************
  81:.\main.c      **** * Summary:
  82:.\main.c      **** *  The sleep interrupt-service-routine used to determine a sleep condition.
  83:.\main.c      **** *  The device goes into the Suspend state when there is a constant Idle 
  84:.\main.c      **** *  state on its upstream-facing bus-lines for more than 3.0 ms. 
  85:.\main.c      **** *  The device must be suspended drawing only suspend current from the 
  86:.\main.c      **** *  bus after no more than 10 ms of the bus inactivity on all its ports.
  87:.\main.c      **** *  This ISR is run each 4 ms, so after a second turn without the USB activity,  
  88:.\main.c      **** *  the device should be suspended.
  89:.\main.c      **** *
  90:.\main.c      **** *******************************************************************************/
  91:.\main.c      **** CY_ISR(SleepIsr)
  92:.\main.c      **** {
  73              		.loc 1 92 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77 0000 80B5     		push	{r7, lr}
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 7, -8
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 4


  80              		.cfi_offset 14, -4
  81 0002 00AF     		add	r7, sp, #0
  82              		.cfi_def_cfa_register 7
  93:.\main.c      ****     /* Check USB activity */
  94:.\main.c      ****     if(0u != USB_CheckActivity()) 
  83              		.loc 1 94 0
  84 0004 FFF7FEFF 		bl	USB_CheckActivity
  85 0008 0346     		mov	r3, r0
  86 000a 002B     		cmp	r3, #0
  87 000c 03D0     		beq	.L2
  95:.\main.c      ****     {
  96:.\main.c      ****         usbActivityCounter = 0u;
  88              		.loc 1 96 0
  89 000e 074B     		ldr	r3, .L4
  90 0010 0022     		movs	r2, #0
  91 0012 1A70     		strb	r2, [r3]
  92 0014 06E0     		b	.L3
  93              	.L2:
  97:.\main.c      ****     } 
  98:.\main.c      ****     else 
  99:.\main.c      ****     {
 100:.\main.c      ****         usbActivityCounter++;
  94              		.loc 1 100 0
  95 0016 054B     		ldr	r3, .L4
  96 0018 1B78     		ldrb	r3, [r3]
  97 001a DBB2     		uxtb	r3, r3
  98 001c 0133     		adds	r3, r3, #1
  99 001e DAB2     		uxtb	r2, r3
 100 0020 024B     		ldr	r3, .L4
 101 0022 1A70     		strb	r2, [r3]
 102              	.L3:
 101:.\main.c      ****     }
 102:.\main.c      ****     /* Clear Pending Interrupt */
 103:.\main.c      ****     SleepTimer_GetStatus();
 103              		.loc 1 103 0
 104 0024 FFF7FEFF 		bl	SleepTimer_GetStatus
 104:.\main.c      **** }
 105              		.loc 1 104 0
 106 0028 80BD     		pop	{r7, pc}
 107              	.L5:
 108 002a 00BF     		.align	2
 109              	.L4:
 110 002c 00000000 		.word	usbActivityCounter
 111              		.cfi_endproc
 112              	.LFE63:
 113              		.size	SleepIsr, .-SleepIsr
 114              		.section	.text.main,"ax",%progbits
 115              		.align	2
 116              		.global	main
 117              		.thumb
 118              		.thumb_func
 119              		.type	main, %function
 120              	main:
 121              	.LFB64:
 105:.\main.c      **** 
 106:.\main.c      **** 
 107:.\main.c      **** /*******************************************************************************
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 5


 108:.\main.c      **** * Function Name: main
 109:.\main.c      **** ********************************************************************************
 110:.\main.c      **** * Summary:
 111:.\main.c      **** *       1. Starts the USBFS device and waits for enumaration.
 112:.\main.c      **** *
 113:.\main.c      **** *******************************************************************************/
 114:.\main.c      **** int main()
 115:.\main.c      **** {
 122              		.loc 1 115 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0000 80B5     		push	{r7, lr}
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 7, -8
 129              		.cfi_offset 14, -4
 130 0002 82B0     		sub	sp, sp, #8
 131              		.cfi_def_cfa_offset 16
 132 0004 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
 116:.\main.c      ****     uint8 midiMsg[MIDI_MSG_SIZE];    
 117:.\main.c      **** 
 118:.\main.c      ****     /* Enable Global Interrupts */
 119:.\main.c      ****     CyGlobalIntEnable;
 134              		.loc 1 119 0
 135              	@ 119 ".\main.c" 1
 136 0006 62B6     		CPSIE   i
 137              	@ 0 "" 2
 120:.\main.c      **** 
 121:.\main.c      ****     /* Start USBFS device 0 with VDDD operation */
 122:.\main.c      ****     USB_Start(DEVICE, USB_DWR_VDDD_OPERATION); 
 138              		.loc 1 122 0
 139              		.thumb
 140 0008 0020     		movs	r0, #0
 141 000a 0221     		movs	r1, #2
 142 000c FFF7FEFF 		bl	USB_Start
 143              	.L24:
 123:.\main.c      **** 
 124:.\main.c      ****     while(1u)
 125:.\main.c      ****     {
 126:.\main.c      ****         /* Host can send double SET_INTERFACE request */
 127:.\main.c      ****         if(0u != USB_IsConfigurationChanged())
 144              		.loc 1 127 0
 145 0010 FFF7FEFF 		bl	USB_IsConfigurationChanged
 146 0014 0346     		mov	r3, r0
 147 0016 002B     		cmp	r3, #0
 148 0018 11D0     		beq	.L7
 128:.\main.c      ****         {
 129:.\main.c      ****             /* Initialize IN endpoints when device configured */
 130:.\main.c      ****             if(0u != USB_GetConfiguration())   
 149              		.loc 1 130 0
 150 001a FFF7FEFF 		bl	USB_GetConfiguration
 151 001e 0346     		mov	r3, r0
 152 0020 002B     		cmp	r3, #0
 153 0022 0AD0     		beq	.L8
 131:.\main.c      ****             {
 132:.\main.c      ****                 /* Power ON CY8CKIT-044 board */
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 6


 133:.\main.c      ****                 MIDI_PWR_Write(0u); 
 154              		.loc 1 133 0
 155 0024 0020     		movs	r0, #0
 156 0026 FFF7FEFF 		bl	MIDI_PWR_Write
 134:.\main.c      ****                 
 135:.\main.c      ****                 /* Start ISR to determine sleep condition */		
 136:.\main.c      ****                 Sleep_isr_StartEx(SleepIsr);
 157              		.loc 1 136 0
 158 002a 7148     		ldr	r0, .L25
 159 002c FFF7FEFF 		bl	Sleep_isr_StartEx
 137:.\main.c      ****                 
 138:.\main.c      ****                 /* Start SleepTimer's operation */
 139:.\main.c      ****                 SleepTimer_Start();
 160              		.loc 1 139 0
 161 0030 FFF7FEFF 		bl	SleepTimer_Start
 140:.\main.c      ****                 
 141:.\main.c      ****             	/* Enable output endpoint */
 142:.\main.c      ****                 USB_MIDI_Init();
 162              		.loc 1 142 0
 163 0034 FFF7FEFF 		bl	USB_MIDI_Init
 164 0038 01E0     		b	.L7
 165              	.L8:
 143:.\main.c      ****             }
 144:.\main.c      ****             else
 145:.\main.c      ****             {
 146:.\main.c      ****                 SleepTimer_Stop();
 166              		.loc 1 146 0
 167 003a FFF7FEFF 		bl	SleepTimer_Stop
 168              	.L7:
 147:.\main.c      ****             }    
 148:.\main.c      ****         }        
 149:.\main.c      ****         
 150:.\main.c      ****         /* Service USB MIDI when device is configured */
 151:.\main.c      ****         if(0u != USB_GetConfiguration())    
 169              		.loc 1 151 0
 170 003e FFF7FEFF 		bl	USB_GetConfiguration
 171 0042 0346     		mov	r3, r0
 172 0044 002B     		cmp	r3, #0
 173 0046 00F0D180 		beq	.L9
 152:.\main.c      ****         {
 153:.\main.c      ****             /* Call this API from UART RX ISR for Auto DMA mode */
 154:.\main.c      ****             #if(!USB_EP_MANAGEMENT_DMA_AUTO) 
 155:.\main.c      ****                 USB_MIDI_IN_Service();
 174              		.loc 1 155 0
 175 004a FFF7FEFF 		bl	USB_MIDI_IN_Service
 156:.\main.c      ****             #endif
 157:.\main.c      ****             /* In Manual EP Memory Management mode OUT_EP_Service() 
 158:.\main.c      ****             *  may have to be called from main foreground or from OUT EP ISR
 159:.\main.c      ****             */
 160:.\main.c      ****             #if(!USB_EP_MANAGEMENT_DMA_AUTO) 
 161:.\main.c      ****                 USB_MIDI_OUT_Service();
 176              		.loc 1 161 0
 177 004e FFF7FEFF 		bl	USB_MIDI_OUT_Service
 162:.\main.c      ****             #endif
 163:.\main.c      **** 
 164:.\main.c      ****             /* Sending Identity Reply Universal System Exclusive message 
 165:.\main.c      ****              * back to computer */
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 7


 166:.\main.c      ****             if(0u != (USB_MIDI1_InqFlags & USB_INQ_IDENTITY_REQ_FLAG))
 178              		.loc 1 166 0
 179 0052 684B     		ldr	r3, .L25+4
 180 0054 1B78     		ldrb	r3, [r3]
 181 0056 DBB2     		uxtb	r3, r3
 182 0058 03F00203 		and	r3, r3, #2
 183 005c 002B     		cmp	r3, #0
 184 005e 0CD0     		beq	.L10
 167:.\main.c      ****             {
 168:.\main.c      ****                 USB_PutUsbMidiIn(sizeof(MIDI_IDENTITY_REPLY), \
 185              		.loc 1 168 0
 186 0060 0E20     		movs	r0, #14
 187 0062 6549     		ldr	r1, .L25+8
 188 0064 0022     		movs	r2, #0
 189 0066 FFF7FEFF 		bl	USB_PutUsbMidiIn
 169:.\main.c      ****                             (uint8 *)MIDI_IDENTITY_REPLY, USB_MIDI_CABLE_00);
 170:.\main.c      ****                 USB_MIDI1_InqFlags &= ~USB_INQ_IDENTITY_REQ_FLAG;
 190              		.loc 1 170 0
 191 006a 624B     		ldr	r3, .L25+4
 192 006c 1B78     		ldrb	r3, [r3]
 193 006e DBB2     		uxtb	r3, r3
 194 0070 23F00203 		bic	r3, r3, #2
 195 0074 DAB2     		uxtb	r2, r3
 196 0076 5F4B     		ldr	r3, .L25+4
 197 0078 1A70     		strb	r2, [r3]
 198              	.L10:
 171:.\main.c      ****             }
 172:.\main.c      ****             #if (USB_MIDI_EXT_MODE >= USB_TWO_EXT_INTRF)
 173:.\main.c      ****                 if(0u != (USB_MIDI2_InqFlags & USB_INQ_IDENTITY_REQ_FLAG))
 199              		.loc 1 173 0
 200 007a 604B     		ldr	r3, .L25+12
 201 007c 1B78     		ldrb	r3, [r3]
 202 007e DBB2     		uxtb	r3, r3
 203 0080 03F00203 		and	r3, r3, #2
 204 0084 002B     		cmp	r3, #0
 205 0086 0CD0     		beq	.L11
 174:.\main.c      ****                 {
 175:.\main.c      ****                     USB_PutUsbMidiIn(sizeof(MIDI_IDENTITY_REPLY), \
 206              		.loc 1 175 0
 207 0088 0E20     		movs	r0, #14
 208 008a 5B49     		ldr	r1, .L25+8
 209 008c 1022     		movs	r2, #16
 210 008e FFF7FEFF 		bl	USB_PutUsbMidiIn
 176:.\main.c      ****                             (uint8 *)MIDI_IDENTITY_REPLY, USB_MIDI_CABLE_01);
 177:.\main.c      ****                     USB_MIDI2_InqFlags &= ~USB_INQ_IDENTITY_REQ_FLAG;
 211              		.loc 1 177 0
 212 0092 5A4B     		ldr	r3, .L25+12
 213 0094 1B78     		ldrb	r3, [r3]
 214 0096 DBB2     		uxtb	r3, r3
 215 0098 23F00203 		bic	r3, r3, #2
 216 009c DAB2     		uxtb	r2, r3
 217 009e 574B     		ldr	r3, .L25+12
 218 00a0 1A70     		strb	r2, [r3]
 219              	.L11:
 178:.\main.c      ****                 }
 179:.\main.c      ****             #endif /* End USB_MIDI_EXT_MODE >= USB_TWO_EXT_INTRF */
 180:.\main.c      ****             
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 8


 181:.\main.c      ****             /* Service Keys */
 182:.\main.c      ****     		if (0u == SW1_Read()) 
 220              		.loc 1 182 0
 221 00a2 FFF7FEFF 		bl	SW1_Read
 222 00a6 0346     		mov	r3, r0
 223 00a8 002B     		cmp	r3, #0
 224 00aa 07D1     		bne	.L12
 183:.\main.c      ****             {
 184:.\main.c      ****                 csButtStates |= BUTT1;
 225              		.loc 1 184 0
 226 00ac 544B     		ldr	r3, .L25+16
 227 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 00b0 43F00103 		orr	r3, r3, #1
 229 00b4 DAB2     		uxtb	r2, r3
 230 00b6 524B     		ldr	r3, .L25+16
 231 00b8 1A70     		strb	r2, [r3]
 232 00ba 06E0     		b	.L13
 233              	.L12:
 185:.\main.c      ****             }
 186:.\main.c      ****             else
 187:.\main.c      ****             {
 188:.\main.c      ****                 csButtStates &= ~BUTT1;
 234              		.loc 1 188 0
 235 00bc 504B     		ldr	r3, .L25+16
 236 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 237 00c0 23F00103 		bic	r3, r3, #1
 238 00c4 DAB2     		uxtb	r2, r3
 239 00c6 4E4B     		ldr	r3, .L25+16
 240 00c8 1A70     		strb	r2, [r3]
 241              	.L13:
 189:.\main.c      ****             }
 190:.\main.c      ****     		if (0u == SW2_Read()) 
 242              		.loc 1 190 0
 243 00ca FFF7FEFF 		bl	SW2_Read
 244 00ce 0346     		mov	r3, r0
 245 00d0 002B     		cmp	r3, #0
 246 00d2 07D1     		bne	.L14
 191:.\main.c      ****             {
 192:.\main.c      ****                 csButtStates |= BUTT2;
 247              		.loc 1 192 0
 248 00d4 4A4B     		ldr	r3, .L25+16
 249 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 250 00d8 43F00203 		orr	r3, r3, #2
 251 00dc DAB2     		uxtb	r2, r3
 252 00de 484B     		ldr	r3, .L25+16
 253 00e0 1A70     		strb	r2, [r3]
 254 00e2 06E0     		b	.L15
 255              	.L14:
 193:.\main.c      ****             }
 194:.\main.c      ****             else
 195:.\main.c      ****             {
 196:.\main.c      ****                 csButtStates &= ~BUTT2;
 256              		.loc 1 196 0
 257 00e4 464B     		ldr	r3, .L25+16
 258 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 259 00e8 23F00203 		bic	r3, r3, #2
 260 00ec DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 9


 261 00ee 444B     		ldr	r3, .L25+16
 262 00f0 1A70     		strb	r2, [r3]
 263              	.L15:
 197:.\main.c      ****             }
 198:.\main.c      ****             /* Process any button change */
 199:.\main.c      ****     		if (0u != (csButtChange = csButtStates ^ csButtStatesOld)) 
 264              		.loc 1 199 0
 265 00f2 434B     		ldr	r3, .L25+16
 266 00f4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 267 00f6 434B     		ldr	r3, .L25+20
 268 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 269 00fa 5340     		eors	r3, r3, r2
 270 00fc DAB2     		uxtb	r2, r3
 271 00fe 424B     		ldr	r3, .L25+24
 272 0100 1A70     		strb	r2, [r3]
 273 0102 414B     		ldr	r3, .L25+24
 274 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 275 0106 002B     		cmp	r3, #0
 276 0108 4CD0     		beq	.L16
 200:.\main.c      ****             {
 201:.\main.c      ****     			csButtStatesOld = csButtStates;
 277              		.loc 1 201 0
 278 010a 3D4B     		ldr	r3, .L25+16
 279 010c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 280 010e 3D4B     		ldr	r3, .L25+20
 281 0110 1A70     		strb	r2, [r3]
 202:.\main.c      **** 
 203:.\main.c      ****     			/* All buttons are mapped to Note-On/Off messages */
 204:.\main.c      ****     			midiMsg[MIDI_MSG_TYPE] = USB_MIDI_NOTE_ON;
 282              		.loc 1 204 0
 283 0112 9023     		movs	r3, #144
 284 0114 3B71     		strb	r3, [r7, #4]
 205:.\main.c      ****     			
 206:.\main.c      ****     			/* Button 1 */
 207:.\main.c      ****     			if (0u != (csButtChange & BUTT1)) 
 285              		.loc 1 207 0
 286 0116 3C4B     		ldr	r3, .L25+24
 287 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 288 011a 03F00103 		and	r3, r3, #1
 289 011e 002B     		cmp	r3, #0
 290 0120 12D0     		beq	.L17
 208:.\main.c      ****                 {
 209:.\main.c      ****     				/* Button determines note number */			
 210:.\main.c      ****     				midiMsg[MIDI_NOTE_NUMBER] = NOTE_72;
 291              		.loc 1 210 0
 292 0122 4823     		movs	r3, #72
 293 0124 7B71     		strb	r3, [r7, #5]
 211:.\main.c      ****     				if (0u != (csButtStates & BUTT1))
 294              		.loc 1 211 0
 295 0126 364B     		ldr	r3, .L25+16
 296 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 297 012a 03F00103 		and	r3, r3, #1
 298 012e 002B     		cmp	r3, #0
 299 0130 02D0     		beq	.L18
 212:.\main.c      ****                     {
 213:.\main.c      ****                         /* Note On */
 214:.\main.c      ****                         midiMsg[MIDI_NOTE_VELOCITY] = VOLUME_ON;		
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 10


 300              		.loc 1 214 0
 301 0132 6423     		movs	r3, #100
 302 0134 BB71     		strb	r3, [r7, #6]
 303 0136 01E0     		b	.L19
 304              	.L18:
 215:.\main.c      ****                     }
 216:.\main.c      ****     				else
 217:.\main.c      ****                     {
 218:.\main.c      ****                         /* Note Off */
 219:.\main.c      ****                         midiMsg[MIDI_NOTE_VELOCITY] = VOLUME_OFF;			
 305              		.loc 1 219 0
 306 0138 0023     		movs	r3, #0
 307 013a BB71     		strb	r3, [r7, #6]
 308              	.L19:
 220:.\main.c      ****                     }    
 221:.\main.c      ****         			/* Put MIDI Note-On/Off message into input endpoint */
 222:.\main.c      ****                     USB_PutUsbMidiIn(USB_3BYTE_COMMON, midiMsg, USB_MIDI_CABLE_00);
 309              		.loc 1 222 0
 310 013c 3B1D     		adds	r3, r7, #4
 311 013e 0320     		movs	r0, #3
 312 0140 1946     		mov	r1, r3
 313 0142 0022     		movs	r2, #0
 314 0144 FFF7FEFF 		bl	USB_PutUsbMidiIn
 315              	.L17:
 223:.\main.c      ****     			}
 224:.\main.c      **** 
 225:.\main.c      ****     			/* Button 2 */
 226:.\main.c      ****     			if (0u != (csButtChange & BUTT2))
 316              		.loc 1 226 0
 317 0148 2F4B     		ldr	r3, .L25+24
 318 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 319 014c 03F00203 		and	r3, r3, #2
 320 0150 002B     		cmp	r3, #0
 321 0152 27D0     		beq	.L16
 227:.\main.c      ****                 {
 228:.\main.c      ****     				/* Button determines note number */			
 229:.\main.c      ****     				midiMsg[MIDI_NOTE_NUMBER] = NOTE_76;
 322              		.loc 1 229 0
 323 0154 4C23     		movs	r3, #76
 324 0156 7B71     		strb	r3, [r7, #5]
 230:.\main.c      ****     				if (0u != (csButtStates & BUTT2))
 325              		.loc 1 230 0
 326 0158 294B     		ldr	r3, .L25+16
 327 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 328 015c 03F00203 		and	r3, r3, #2
 329 0160 002B     		cmp	r3, #0
 330 0162 02D0     		beq	.L20
 231:.\main.c      ****                     {
 232:.\main.c      ****                         /* Note On */
 233:.\main.c      ****                         midiMsg[MIDI_NOTE_VELOCITY] = VOLUME_ON;  
 331              		.loc 1 233 0
 332 0164 6423     		movs	r3, #100
 333 0166 BB71     		strb	r3, [r7, #6]
 334 0168 01E0     		b	.L21
 335              	.L20:
 234:.\main.c      ****                     }
 235:.\main.c      ****     				else
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 11


 236:.\main.c      ****                     {
 237:.\main.c      ****                         /* Note Off */
 238:.\main.c      ****                         midiMsg[MIDI_NOTE_VELOCITY] = VOLUME_OFF; 
 336              		.loc 1 238 0
 337 016a 0023     		movs	r3, #0
 338 016c BB71     		strb	r3, [r7, #6]
 339              	.L21:
 239:.\main.c      ****                     }    
 240:.\main.c      ****         			/* Put MIDI Note-On/Off message into input endpoint */
 241:.\main.c      ****     				USB_PutUsbMidiIn(USB_3BYTE_COMMON, midiMsg, USB_MIDI_CABLE_00);
 340              		.loc 1 241 0
 341 016e 3B1D     		adds	r3, r7, #4
 342 0170 0320     		movs	r0, #3
 343 0172 1946     		mov	r1, r3
 344 0174 0022     		movs	r2, #0
 345 0176 FFF7FEFF 		bl	USB_PutUsbMidiIn
 242:.\main.c      ****                     /* Second Note message */
 243:.\main.c      ****                     midiMsg[MIDI_MSG_TYPE] = USB_MIDI_NOTE_ON;
 346              		.loc 1 243 0
 347 017a 9023     		movs	r3, #144
 348 017c 3B71     		strb	r3, [r7, #4]
 244:.\main.c      ****                 	midiMsg[MIDI_NOTE_NUMBER] = NOTE_72;
 349              		.loc 1 244 0
 350 017e 4823     		movs	r3, #72
 351 0180 7B71     		strb	r3, [r7, #5]
 245:.\main.c      ****                     if (0u != (csButtStates & BUTT2))
 352              		.loc 1 245 0
 353 0182 1F4B     		ldr	r3, .L25+16
 354 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 355 0186 03F00203 		and	r3, r3, #2
 356 018a 002B     		cmp	r3, #0
 357 018c 02D0     		beq	.L22
 246:.\main.c      ****                     {
 247:.\main.c      ****                         /* Note On */
 248:.\main.c      ****                         midiMsg[MIDI_NOTE_VELOCITY] = VOLUME_ON;		    
 358              		.loc 1 248 0
 359 018e 6423     		movs	r3, #100
 360 0190 BB71     		strb	r3, [r7, #6]
 361 0192 01E0     		b	.L23
 362              	.L22:
 249:.\main.c      ****                     }
 250:.\main.c      ****     				else
 251:.\main.c      ****                     {
 252:.\main.c      ****                         /* Note Off */
 253:.\main.c      ****                         midiMsg[MIDI_NOTE_VELOCITY] = VOLUME_OFF;			
 363              		.loc 1 253 0
 364 0194 0023     		movs	r3, #0
 365 0196 BB71     		strb	r3, [r7, #6]
 366              	.L23:
 254:.\main.c      ****                     }    
 255:.\main.c      ****         			/* Put MIDI Note-On/Off message into input endpoint */
 256:.\main.c      ****                     USB_PutUsbMidiIn(USB_3BYTE_COMMON, midiMsg, USB_MIDI_CABLE_00);
 367              		.loc 1 256 0
 368 0198 3B1D     		adds	r3, r7, #4
 369 019a 0320     		movs	r0, #3
 370 019c 1946     		mov	r1, r3
 371 019e 0022     		movs	r2, #0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 12


 372 01a0 FFF7FEFF 		bl	USB_PutUsbMidiIn
 373              	.L16:
 257:.\main.c      ****     			}
 258:.\main.c      ****                 #if(USB_EP_MANAGEMENT_DMA_AUTO) 
 259:.\main.c      ****                    #if (USB_MIDI_EXT_MODE >= USB_ONE_EXT_INTRF)
 260:.\main.c      ****                         MIDI1_UART_DisableRxInt();
 261:.\main.c      ****                         #if (USB_MIDI_EXT_MODE >= USB_TWO_EXT_INTRF)
 262:.\main.c      ****                             MIDI2_UART_DisableRxInt();
 263:.\main.c      ****                         #endif /* End USB_MIDI_EXT_MODE >= USB_TWO_EXT_INTRF */
 264:.\main.c      ****                     #endif /* End USB_MIDI_EXT_MODE >= USB_ONE_EXT_INTRF */            
 265:.\main.c      ****                     USB_MIDI_IN_Service();
 266:.\main.c      ****                     #if (USB_MIDI_EXT_MODE >= USB_ONE_EXT_INTRF)
 267:.\main.c      ****                         MIDI1_UART_EnableRxInt();
 268:.\main.c      ****                         #if (USB_MIDI_EXT_MODE >= USB_TWO_EXT_INTRF)
 269:.\main.c      ****                             MIDI2_UART_EnableRxInt();
 270:.\main.c      ****                         #endif /* End USB_MIDI_EXT_MODE >= USB_TWO_EXT_INTRF */
 271:.\main.c      ****                     #endif /* End USB_MIDI_EXT_MODE >= USB_ONE_EXT_INTRF */                
 272:.\main.c      ****                 #endif
 273:.\main.c      ****     		}
 274:.\main.c      ****         
 275:.\main.c      ****             /* Check if host requested USB Suspend */
 276:.\main.c      ****             if( usbActivityCounter >= USB_SUSPEND_TIMEOUT ) 
 374              		.loc 1 276 0
 375 01a4 194B     		ldr	r3, .L25+28
 376 01a6 1B78     		ldrb	r3, [r3]
 377 01a8 DBB2     		uxtb	r3, r3
 378 01aa 012B     		cmp	r3, #1
 379 01ac 1ED9     		bls	.L9
 277:.\main.c      ****             {
 278:.\main.c      ****                 MIDI1_UART_Sleep();
 380              		.loc 1 278 0
 381 01ae FFF7FEFF 		bl	MIDI1_UART_Sleep
 279:.\main.c      ****                 MIDI2_UART_Sleep();
 382              		.loc 1 279 0
 383 01b2 FFF7FEFF 		bl	MIDI2_UART_Sleep
 280:.\main.c      ****                 
 281:.\main.c      ****                 /* Power OFF CY8CKIT-044 board */
 282:.\main.c      ****                 MIDI_PWR_Write(1u);     
 384              		.loc 1 282 0
 385 01b6 0120     		movs	r0, #1
 386 01b8 FFF7FEFF 		bl	MIDI_PWR_Write
 283:.\main.c      ****                 
 284:.\main.c      ****                 /***************************************************************
 285:.\main.c      ****                 * Disable USBFS block and set DP Interrupt for wake-up 
 286:.\main.c      ****                 * from sleep mode. 
 287:.\main.c      ****                 ***************************************************************/
 288:.\main.c      ****                 USB_Suspend(); 
 387              		.loc 1 288 0
 388 01bc FFF7FEFF 		bl	USB_Suspend
 289:.\main.c      ****                 /* Prepares system clocks for sleep mode */
 290:.\main.c      ****                 CyPmSaveClocks();
 389              		.loc 1 290 0
 390 01c0 FFF7FEFF 		bl	CyPmSaveClocks
 291:.\main.c      ****                 /***************************************************************
 292:.\main.c      ****                 * Switch to the Sleep Mode for the PSoC 3 or PSoC 5LP devices:
 293:.\main.c      ****                 *  - PM_SLEEP_TIME_NONE: wakeup time is defined by PICU source
 294:.\main.c      ****                 *  - PM_SLEEP_SRC_PICU: PICU wakeup source 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 13


 295:.\main.c      ****                 ***************************************************************/
 296:.\main.c      ****                 CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_PICU);
 391              		.loc 1 296 0
 392 01c4 0020     		movs	r0, #0
 393 01c6 4021     		movs	r1, #64
 394 01c8 FFF7FEFF 		bl	CyPmSleep
 297:.\main.c      ****                 /* Restore clock configuration */
 298:.\main.c      ****                 CyPmRestoreClocks();
 395              		.loc 1 298 0
 396 01cc FFF7FEFF 		bl	CyPmRestoreClocks
 299:.\main.c      ****                 /* Enable USBFS block after power-down mode */
 300:.\main.c      ****                 USB_Resume();
 397              		.loc 1 300 0
 398 01d0 FFF7FEFF 		bl	USB_Resume
 301:.\main.c      ****                 
 302:.\main.c      ****                 /* Enable output endpoint */
 303:.\main.c      ****                 USB_MIDI_Init();
 399              		.loc 1 303 0
 400 01d4 FFF7FEFF 		bl	USB_MIDI_Init
 304:.\main.c      ****                 
 305:.\main.c      ****                 /* Power ON CY8CKIT-044 board */
 306:.\main.c      ****                 MIDI_PWR_Write(0u);
 401              		.loc 1 306 0
 402 01d8 0020     		movs	r0, #0
 403 01da FFF7FEFF 		bl	MIDI_PWR_Write
 307:.\main.c      ****                 
 308:.\main.c      ****                 MIDI1_UART_Wakeup();
 404              		.loc 1 308 0
 405 01de FFF7FEFF 		bl	MIDI1_UART_Wakeup
 309:.\main.c      ****                 MIDI2_UART_Wakeup();
 406              		.loc 1 309 0
 407 01e2 FFF7FEFF 		bl	MIDI2_UART_Wakeup
 310:.\main.c      ****                 usbActivityCounter = 0u; /* Re-init USB Activity Counter*/
 408              		.loc 1 310 0
 409 01e6 094B     		ldr	r3, .L25+28
 410 01e8 0022     		movs	r2, #0
 411 01ea 1A70     		strb	r2, [r3]
 412              	.L9:
 311:.\main.c      ****             }
 312:.\main.c      ****         }
 313:.\main.c      ****     }
 413              		.loc 1 313 0
 414 01ec 10E7     		b	.L24
 415              	.L26:
 416 01ee 00BF     		.align	2
 417              	.L25:
 418 01f0 00000000 		.word	SleepIsr
 419 01f4 00000000 		.word	USB_MIDI1_InqFlags
 420 01f8 00000000 		.word	MIDI_IDENTITY_REPLY
 421 01fc 00000000 		.word	USB_MIDI2_InqFlags
 422 0200 00000000 		.word	csButtStates
 423 0204 00000000 		.word	csButtStatesOld
 424 0208 00000000 		.word	csButtChange
 425 020c 00000000 		.word	usbActivityCounter
 426              		.cfi_endproc
 427              	.LFE64:
 428              		.size	main, .-main
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 14


 429              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 430              		.align	2
 431              		.global	USB_callbackLocalMidiEvent
 432              		.thumb
 433              		.thumb_func
 434              		.type	USB_callbackLocalMidiEvent, %function
 435              	USB_callbackLocalMidiEvent:
 436              	.LFB65:
 314:.\main.c      **** }
 315:.\main.c      **** 
 316:.\main.c      **** 
 317:.\main.c      **** /*******************************************************************************
 318:.\main.c      **** * Function Name: USB_callbackLocalMidiEvent
 319:.\main.c      **** ********************************************************************************
 320:.\main.c      **** * Summary: Local processing of the USB MIDI out-events.
 321:.\main.c      **** *
 322:.\main.c      **** *******************************************************************************/
 323:.\main.c      **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
 324:.\main.c      **** {
 437              		.loc 1 324 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 8
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441 0000 80B5     		push	{r7, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 82B0     		sub	sp, sp, #8
 446              		.cfi_def_cfa_offset 16
 447 0004 00AF     		add	r7, sp, #0
 448              		.cfi_def_cfa_register 7
 449 0006 0346     		mov	r3, r0
 450 0008 3960     		str	r1, [r7]
 451 000a FB71     		strb	r3, [r7, #7]
 325:.\main.c      ****     /* Support General System On/Off Message. */
 326:.\main.c      ****     if((0u == (USB_MIDI1_InqFlags & USB_INQ_SYSEX_FLAG)) \
 452              		.loc 1 326 0
 453 000c 144B     		ldr	r3, .L30
 454 000e 1B78     		ldrb	r3, [r3]
 455 0010 DBB2     		uxtb	r3, r3
 456 0012 03F00103 		and	r3, r3, #1
 457 0016 002B     		cmp	r3, #0
 458 0018 1AD1     		bne	.L28
 327:.\main.c      ****             && (0u != (inqFlagsOld & USB_INQ_SYSEX_FLAG)))
 459              		.loc 1 327 0
 460 001a 124B     		ldr	r3, .L30+4
 461 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 462 001e 03F00103 		and	r3, r3, #1
 463 0022 002B     		cmp	r3, #0
 464 0024 14D0     		beq	.L28
 328:.\main.c      ****     {
 329:.\main.c      ****         if(midiMsg[USB_EVENT_BYTE0] == USB_MIDI_SYSEX_GEN_MESSAGE)
 465              		.loc 1 329 0
 466 0026 3B68     		ldr	r3, [r7]
 467 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 468 002a 092B     		cmp	r3, #9
 469 002c 10D1     		bne	.L28
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 15


 330:.\main.c      ****         {
 331:.\main.c      ****             if(midiMsg[USB_EVENT_BYTE1] == USB_MIDI_SYSEX_SYSTEM_ON)
 470              		.loc 1 331 0
 471 002e 3B68     		ldr	r3, [r7]
 472 0030 0133     		adds	r3, r3, #1
 473 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 474 0034 012B     		cmp	r3, #1
 475 0036 03D1     		bne	.L29
 332:.\main.c      ****             {
 333:.\main.c      ****                 MIDI_PWR_Write(0u); /* Power ON */
 476              		.loc 1 333 0
 477 0038 0020     		movs	r0, #0
 478 003a FFF7FEFF 		bl	MIDI_PWR_Write
 479 003e 07E0     		b	.L28
 480              	.L29:
 334:.\main.c      ****             }
 335:.\main.c      ****             else if(midiMsg[USB_EVENT_BYTE1] == USB_MIDI_SYSEX_SYSTEM_OFF)
 481              		.loc 1 335 0
 482 0040 3B68     		ldr	r3, [r7]
 483 0042 0133     		adds	r3, r3, #1
 484 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 485 0046 022B     		cmp	r3, #2
 486 0048 02D1     		bne	.L28
 336:.\main.c      ****             {
 337:.\main.c      ****                 MIDI_PWR_Write(1u); /* Power OFF */
 487              		.loc 1 337 0
 488 004a 0120     		movs	r0, #1
 489 004c FFF7FEFF 		bl	MIDI_PWR_Write
 490              	.L28:
 338:.\main.c      ****             }
 339:.\main.c      ****         }
 340:.\main.c      ****     }
 341:.\main.c      ****     inqFlagsOld = USB_MIDI1_InqFlags;
 491              		.loc 1 341 0
 492 0050 034B     		ldr	r3, .L30
 493 0052 1B78     		ldrb	r3, [r3]
 494 0054 DAB2     		uxtb	r2, r3
 495 0056 034B     		ldr	r3, .L30+4
 496 0058 1A70     		strb	r2, [r3]
 342:.\main.c      ****     cable = cable;
 343:.\main.c      **** }    
 497              		.loc 1 343 0
 498 005a 0837     		adds	r7, r7, #8
 499              		.cfi_def_cfa_offset 8
 500 005c BD46     		mov	sp, r7
 501              		.cfi_def_cfa_register 13
 502              		@ sp needed
 503 005e 80BD     		pop	{r7, pc}
 504              	.L31:
 505              		.align	2
 506              	.L30:
 507 0060 00000000 		.word	USB_MIDI1_InqFlags
 508 0064 00000000 		.word	inqFlagsOld
 509              		.cfi_endproc
 510              	.LFE65:
 511              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 512              		.section	.text.USB_MIDI1_ProcessUsbOut_EntryCallback,"ax",%progbits
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 16


 513              		.align	2
 514              		.global	USB_MIDI1_ProcessUsbOut_EntryCallback
 515              		.thumb
 516              		.thumb_func
 517              		.type	USB_MIDI1_ProcessUsbOut_EntryCallback, %function
 518              	USB_MIDI1_ProcessUsbOut_EntryCallback:
 519              	.LFB66:
 344:.\main.c      **** 
 345:.\main.c      **** 
 346:.\main.c      **** /*******************************************************************************
 347:.\main.c      **** * Function Name: USB_MIDI1_ProcessUsbOut_EntryCallback
 348:.\main.c      **** ********************************************************************************
 349:.\main.c      **** * Summary:  Turn the LED_OutA on at the beginning of the function
 350:.\main.c      **** * USB_MIDI1_ProcessUsbOut() when data comes to be put in the UART1 out
 351:.\main.c      **** * buffer.
 352:.\main.c      **** * 
 353:.\main.c      **** *******************************************************************************/
 354:.\main.c      **** void USB_MIDI1_ProcessUsbOut_EntryCallback(void)
 355:.\main.c      **** {
 520              		.loc 1 355 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524 0000 80B5     		push	{r7, lr}
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528 0002 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 356:.\main.c      ****     LED_OutA_Write(1);
 530              		.loc 1 356 0
 531 0004 0120     		movs	r0, #1
 532 0006 FFF7FEFF 		bl	LED_OutA_Write
 357:.\main.c      **** }
 533              		.loc 1 357 0
 534 000a 80BD     		pop	{r7, pc}
 535              		.cfi_endproc
 536              	.LFE66:
 537              		.size	USB_MIDI1_ProcessUsbOut_EntryCallback, .-USB_MIDI1_ProcessUsbOut_EntryCallback
 538              		.section	.text.USB_MIDI1_ProcessUsbOut_ExitCallback,"ax",%progbits
 539              		.align	2
 540              		.global	USB_MIDI1_ProcessUsbOut_ExitCallback
 541              		.thumb
 542              		.thumb_func
 543              		.type	USB_MIDI1_ProcessUsbOut_ExitCallback, %function
 544              	USB_MIDI1_ProcessUsbOut_ExitCallback:
 545              	.LFB67:
 358:.\main.c      **** 
 359:.\main.c      **** 
 360:.\main.c      **** /*******************************************************************************
 361:.\main.c      **** * Function Name: USB_MIDI1_ProcessUsbOut_ExitCallback
 362:.\main.c      **** ********************************************************************************
 363:.\main.c      **** * Summary:  Turn the LED_OutA off at the end of the function  
 364:.\main.c      **** * USB_MIDI1_ProcessUsbOut() when data is put in the UART1 out-buffer.
 365:.\main.c      **** * 
 366:.\main.c      **** *******************************************************************************/
 367:.\main.c      **** void USB_MIDI1_ProcessUsbOut_ExitCallback(void)
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 17


 368:.\main.c      **** {
 546              		.loc 1 368 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 1, uses_anonymous_args = 0
 550 0000 80B5     		push	{r7, lr}
 551              		.cfi_def_cfa_offset 8
 552              		.cfi_offset 7, -8
 553              		.cfi_offset 14, -4
 554 0002 00AF     		add	r7, sp, #0
 555              		.cfi_def_cfa_register 7
 369:.\main.c      ****     LED_OutA_Write(0);
 556              		.loc 1 369 0
 557 0004 0020     		movs	r0, #0
 558 0006 FFF7FEFF 		bl	LED_OutA_Write
 370:.\main.c      **** }
 559              		.loc 1 370 0
 560 000a 80BD     		pop	{r7, pc}
 561              		.cfi_endproc
 562              	.LFE67:
 563              		.size	USB_MIDI1_ProcessUsbOut_ExitCallback, .-USB_MIDI1_ProcessUsbOut_ExitCallback
 564              		.section	.text.USB_MIDI2_ProcessUsbOut_EntryCallback,"ax",%progbits
 565              		.align	2
 566              		.global	USB_MIDI2_ProcessUsbOut_EntryCallback
 567              		.thumb
 568              		.thumb_func
 569              		.type	USB_MIDI2_ProcessUsbOut_EntryCallback, %function
 570              	USB_MIDI2_ProcessUsbOut_EntryCallback:
 571              	.LFB68:
 371:.\main.c      **** 
 372:.\main.c      **** 
 373:.\main.c      **** /*******************************************************************************
 374:.\main.c      **** * Function Name: USB_MIDI2_ProcessUsbOut_EntryCallback
 375:.\main.c      **** ********************************************************************************
 376:.\main.c      **** * Summary:  Turn the LED_OutB on at the beginning of the function  
 377:.\main.c      **** * USB_MIDI2_ProcessUsbOut() when data comes to be put in the UART2 out- 
 378:.\main.c      **** * buffer  
 379:.\main.c      **** * 
 380:.\main.c      **** *******************************************************************************/
 381:.\main.c      **** void USB_MIDI2_ProcessUsbOut_EntryCallback(void)
 382:.\main.c      **** {
 572              		.loc 1 382 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576 0000 80B5     		push	{r7, lr}
 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 7, -8
 579              		.cfi_offset 14, -4
 580 0002 00AF     		add	r7, sp, #0
 581              		.cfi_def_cfa_register 7
 383:.\main.c      ****     LED_OutB_Write(1);
 582              		.loc 1 383 0
 583 0004 0120     		movs	r0, #1
 584 0006 FFF7FEFF 		bl	LED_OutB_Write
 384:.\main.c      **** }
 585              		.loc 1 384 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 18


 586 000a 80BD     		pop	{r7, pc}
 587              		.cfi_endproc
 588              	.LFE68:
 589              		.size	USB_MIDI2_ProcessUsbOut_EntryCallback, .-USB_MIDI2_ProcessUsbOut_EntryCallback
 590              		.section	.text.USB_MIDI2_ProcessUsbOut_ExitCallback,"ax",%progbits
 591              		.align	2
 592              		.global	USB_MIDI2_ProcessUsbOut_ExitCallback
 593              		.thumb
 594              		.thumb_func
 595              		.type	USB_MIDI2_ProcessUsbOut_ExitCallback, %function
 596              	USB_MIDI2_ProcessUsbOut_ExitCallback:
 597              	.LFB69:
 385:.\main.c      **** 
 386:.\main.c      **** 
 387:.\main.c      **** /*******************************************************************************
 388:.\main.c      **** * Function Name: USB_MIDI2_ProcessUsbOut_ExitCallback
 389:.\main.c      **** ********************************************************************************
 390:.\main.c      **** * Summary:  Turn the LED_OutB off at the end of the function  
 391:.\main.c      **** * USB_MIDI2_ProcessUsbOut() when data is put in the UART2 out-buffer.
 392:.\main.c      **** * 
 393:.\main.c      **** *******************************************************************************/
 394:.\main.c      **** void USB_MIDI2_ProcessUsbOut_ExitCallback(void)
 395:.\main.c      **** {
 598              		.loc 1 395 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602 0000 80B5     		push	{r7, lr}
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 7, -8
 605              		.cfi_offset 14, -4
 606 0002 00AF     		add	r7, sp, #0
 607              		.cfi_def_cfa_register 7
 396:.\main.c      ****     LED_OutB_Write(0);
 608              		.loc 1 396 0
 609 0004 0020     		movs	r0, #0
 610 0006 FFF7FEFF 		bl	LED_OutB_Write
 397:.\main.c      **** }
 611              		.loc 1 397 0
 612 000a 80BD     		pop	{r7, pc}
 613              		.cfi_endproc
 614              	.LFE69:
 615              		.size	USB_MIDI2_ProcessUsbOut_ExitCallback, .-USB_MIDI2_ProcessUsbOut_ExitCallback
 616              		.section	.text.MIDI1_UART_RXISR_EntryCallback,"ax",%progbits
 617              		.align	2
 618              		.global	MIDI1_UART_RXISR_EntryCallback
 619              		.thumb
 620              		.thumb_func
 621              		.type	MIDI1_UART_RXISR_EntryCallback, %function
 622              	MIDI1_UART_RXISR_EntryCallback:
 623              	.LFB70:
 398:.\main.c      **** 
 399:.\main.c      **** 
 400:.\main.c      **** /*******************************************************************************
 401:.\main.c      **** * Function Name: MIDI1_UART_RXISR_EntryCallback
 402:.\main.c      **** ********************************************************************************
 403:.\main.c      **** * Summary:  Turn the LED_InA on at the beginning of the MIDI1_UART_RXISR ISR  
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 19


 404:.\main.c      **** * when data comes to UART1 to be put in the USBFS_MIDI IN endpoint
 405:.\main.c      **** * buffer.
 406:.\main.c      **** *
 407:.\main.c      **** *******************************************************************************/
 408:.\main.c      **** void MIDI1_UART_RXISR_EntryCallback(void)
 409:.\main.c      **** {
 624              		.loc 1 409 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 1, uses_anonymous_args = 0
 628 0000 80B5     		push	{r7, lr}
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 7, -8
 631              		.cfi_offset 14, -4
 632 0002 00AF     		add	r7, sp, #0
 633              		.cfi_def_cfa_register 7
 410:.\main.c      ****     /* These LEDs indicate MIDI input activity */
 411:.\main.c      ****     LED_InA_Write(1);
 634              		.loc 1 411 0
 635 0004 0120     		movs	r0, #1
 636 0006 FFF7FEFF 		bl	LED_InA_Write
 412:.\main.c      **** }
 637              		.loc 1 412 0
 638 000a 80BD     		pop	{r7, pc}
 639              		.cfi_endproc
 640              	.LFE70:
 641              		.size	MIDI1_UART_RXISR_EntryCallback, .-MIDI1_UART_RXISR_EntryCallback
 642              		.section	.text.MIDI1_UART_RXISR_ExitCallback,"ax",%progbits
 643              		.align	2
 644              		.global	MIDI1_UART_RXISR_ExitCallback
 645              		.thumb
 646              		.thumb_func
 647              		.type	MIDI1_UART_RXISR_ExitCallback, %function
 648              	MIDI1_UART_RXISR_ExitCallback:
 649              	.LFB71:
 413:.\main.c      **** 
 414:.\main.c      **** 
 415:.\main.c      **** /*******************************************************************************
 416:.\main.c      **** * Function Name: MIDI1_UART_RXISR_ExitCallback
 417:.\main.c      **** ********************************************************************************
 418:.\main.c      **** * Summary:  Turn the LED_InA off at the end of the MIDI1_UART_RXISR ISR  
 419:.\main.c      **** * when data is put in the USBFS_MIDI IN endpoint buffer.
 420:.\main.c      **** *
 421:.\main.c      **** *******************************************************************************/
 422:.\main.c      **** void MIDI1_UART_RXISR_ExitCallback(void)
 423:.\main.c      **** {
 650              		.loc 1 423 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 1, uses_anonymous_args = 0
 654 0000 80B5     		push	{r7, lr}
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 7, -8
 657              		.cfi_offset 14, -4
 658 0002 00AF     		add	r7, sp, #0
 659              		.cfi_def_cfa_register 7
 424:.\main.c      ****     #if (USB_EP_MANAGEMENT_DMA_AUTO) 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 20


 425:.\main.c      ****         USB_MIDI_IN_Service();
 426:.\main.c      ****     #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
 427:.\main.c      ****     
 428:.\main.c      ****     LED_InA_Write(0);
 660              		.loc 1 428 0
 661 0004 0020     		movs	r0, #0
 662 0006 FFF7FEFF 		bl	LED_InA_Write
 429:.\main.c      **** }
 663              		.loc 1 429 0
 664 000a 80BD     		pop	{r7, pc}
 665              		.cfi_endproc
 666              	.LFE71:
 667              		.size	MIDI1_UART_RXISR_ExitCallback, .-MIDI1_UART_RXISR_ExitCallback
 668              		.section	.text.MIDI2_UART_RXISR_EntryCallback,"ax",%progbits
 669              		.align	2
 670              		.global	MIDI2_UART_RXISR_EntryCallback
 671              		.thumb
 672              		.thumb_func
 673              		.type	MIDI2_UART_RXISR_EntryCallback, %function
 674              	MIDI2_UART_RXISR_EntryCallback:
 675              	.LFB72:
 430:.\main.c      **** 
 431:.\main.c      **** 
 432:.\main.c      **** /*******************************************************************************
 433:.\main.c      **** * Function Name: MIDI2_UART_RXISR_EntryCallback
 434:.\main.c      **** ********************************************************************************
 435:.\main.c      **** * Summary:  Turn the LED_InB on at the beginning of the MIDI2_UART_RXISR ISR  
 436:.\main.c      **** * when data comes to UART2 to be put in the USBFS_MIDI IN endpoint  
 437:.\main.c      **** * buffer.
 438:.\main.c      **** *
 439:.\main.c      **** *******************************************************************************/
 440:.\main.c      **** void MIDI2_UART_RXISR_EntryCallback(void)
 441:.\main.c      **** {
 676              		.loc 1 441 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 0
 679              		@ frame_needed = 1, uses_anonymous_args = 0
 680 0000 80B5     		push	{r7, lr}
 681              		.cfi_def_cfa_offset 8
 682              		.cfi_offset 7, -8
 683              		.cfi_offset 14, -4
 684 0002 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 442:.\main.c      ****     /* These LEDs indicate MIDI input activity */
 443:.\main.c      ****     LED_InB_Write(1);
 686              		.loc 1 443 0
 687 0004 0120     		movs	r0, #1
 688 0006 FFF7FEFF 		bl	LED_InB_Write
 444:.\main.c      **** }
 689              		.loc 1 444 0
 690 000a 80BD     		pop	{r7, pc}
 691              		.cfi_endproc
 692              	.LFE72:
 693              		.size	MIDI2_UART_RXISR_EntryCallback, .-MIDI2_UART_RXISR_EntryCallback
 694              		.section	.text.MIDI2_UART_RXISR_ExitCallback,"ax",%progbits
 695              		.align	2
 696              		.global	MIDI2_UART_RXISR_ExitCallback
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 21


 697              		.thumb
 698              		.thumb_func
 699              		.type	MIDI2_UART_RXISR_ExitCallback, %function
 700              	MIDI2_UART_RXISR_ExitCallback:
 701              	.LFB73:
 445:.\main.c      **** 
 446:.\main.c      **** 
 447:.\main.c      **** /*******************************************************************************
 448:.\main.c      **** * Function Name: MIDI2_UART_RXISR_ExitCallback
 449:.\main.c      **** ********************************************************************************
 450:.\main.c      **** * Summary:  Turn the LED_InB off at the end of the MIDI2_UART_RXISR ISR  
 451:.\main.c      **** * when data is put in the USBFS_MIDI IN endpoint buffer
 452:.\main.c      **** *
 453:.\main.c      **** *******************************************************************************/
 454:.\main.c      **** void MIDI2_UART_RXISR_ExitCallback(void)
 455:.\main.c      **** {
 702              		.loc 1 455 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 1, uses_anonymous_args = 0
 706 0000 80B5     		push	{r7, lr}
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 7, -8
 709              		.cfi_offset 14, -4
 710 0002 00AF     		add	r7, sp, #0
 711              		.cfi_def_cfa_register 7
 456:.\main.c      ****     #if (USB_EP_MANAGEMENT_DMA_AUTO) 
 457:.\main.c      ****         USB_MIDI_IN_Service();
 458:.\main.c      ****     #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
 459:.\main.c      ****     
 460:.\main.c      ****     LED_InB_Write(0);
 712              		.loc 1 460 0
 713 0004 0020     		movs	r0, #0
 714 0006 FFF7FEFF 		bl	LED_InB_Write
 461:.\main.c      **** }
 715              		.loc 1 461 0
 716 000a 80BD     		pop	{r7, pc}
 717              		.cfi_endproc
 718              	.LFE73:
 719              		.size	MIDI2_UART_RXISR_ExitCallback, .-MIDI2_UART_RXISR_ExitCallback
 720              		.text
 721              	.Letext0:
 722              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 723              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 724              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 725              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 726              		.section	.debug_info,"",%progbits
 727              	.Ldebug_info0:
 728 0000 61020000 		.4byte	0x261
 729 0004 0400     		.2byte	0x4
 730 0006 00000000 		.4byte	.Ldebug_abbrev0
 731 000a 04       		.byte	0x4
 732 000b 01       		.uleb128 0x1
 733 000c 53000000 		.4byte	.LASF38
 734 0010 01       		.byte	0x1
 735 0011 21010000 		.4byte	.LASF39
 736 0015 C2020000 		.4byte	.LASF40
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 22


 737 0019 00000000 		.4byte	.Ldebug_ranges0+0
 738 001d 00000000 		.4byte	0
 739 0021 00000000 		.4byte	.Ldebug_line0
 740 0025 02       		.uleb128 0x2
 741 0026 01       		.byte	0x1
 742 0027 06       		.byte	0x6
 743 0028 4E030000 		.4byte	.LASF0
 744 002c 02       		.uleb128 0x2
 745 002d 01       		.byte	0x1
 746 002e 08       		.byte	0x8
 747 002f 13010000 		.4byte	.LASF1
 748 0033 02       		.uleb128 0x2
 749 0034 02       		.byte	0x2
 750 0035 05       		.byte	0x5
 751 0036 B8020000 		.4byte	.LASF2
 752 003a 02       		.uleb128 0x2
 753 003b 02       		.byte	0x2
 754 003c 07       		.byte	0x7
 755 003d 3C010000 		.4byte	.LASF3
 756 0041 03       		.uleb128 0x3
 757 0042 2A000000 		.4byte	.LASF9
 758 0046 02       		.byte	0x2
 759 0047 3F       		.byte	0x3f
 760 0048 4C000000 		.4byte	0x4c
 761 004c 02       		.uleb128 0x2
 762 004d 04       		.byte	0x4
 763 004e 05       		.byte	0x5
 764 004f 45030000 		.4byte	.LASF4
 765 0053 02       		.uleb128 0x2
 766 0054 04       		.byte	0x4
 767 0055 07       		.byte	0x7
 768 0056 2A010000 		.4byte	.LASF5
 769 005a 02       		.uleb128 0x2
 770 005b 08       		.byte	0x8
 771 005c 05       		.byte	0x5
 772 005d 05010000 		.4byte	.LASF6
 773 0061 02       		.uleb128 0x2
 774 0062 08       		.byte	0x8
 775 0063 07       		.byte	0x7
 776 0064 DD010000 		.4byte	.LASF7
 777 0068 04       		.uleb128 0x4
 778 0069 04       		.byte	0x4
 779 006a 05       		.byte	0x5
 780 006b 696E7400 		.ascii	"int\000"
 781 006f 02       		.uleb128 0x2
 782 0070 04       		.byte	0x4
 783 0071 07       		.byte	0x7
 784 0072 D0010000 		.4byte	.LASF8
 785 0076 03       		.uleb128 0x3
 786 0077 45020000 		.4byte	.LASF10
 787 007b 03       		.byte	0x3
 788 007c 2C       		.byte	0x2c
 789 007d 41000000 		.4byte	0x41
 790 0081 05       		.uleb128 0x5
 791 0082 3F030000 		.4byte	.LASF11
 792 0086 04       		.byte	0x4
 793 0087 3801     		.2byte	0x138
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 23


 794 0089 2C000000 		.4byte	0x2c
 795 008d 02       		.uleb128 0x2
 796 008e 04       		.byte	0x4
 797 008f 04       		.byte	0x4
 798 0090 FF000000 		.4byte	.LASF12
 799 0094 02       		.uleb128 0x2
 800 0095 08       		.byte	0x8
 801 0096 04       		.byte	0x4
 802 0097 62010000 		.4byte	.LASF13
 803 009b 02       		.uleb128 0x2
 804 009c 01       		.byte	0x1
 805 009d 08       		.byte	0x8
 806 009e 90020000 		.4byte	.LASF14
 807 00a2 06       		.uleb128 0x6
 808 00a3 81000000 		.4byte	0x81
 809 00a7 02       		.uleb128 0x2
 810 00a8 04       		.byte	0x4
 811 00a9 07       		.byte	0x7
 812 00aa 4D020000 		.4byte	.LASF15
 813 00ae 07       		.uleb128 0x7
 814 00af 81000000 		.4byte	0x81
 815 00b3 BE000000 		.4byte	0xbe
 816 00b7 08       		.uleb128 0x8
 817 00b8 A7000000 		.4byte	0xa7
 818 00bc 03       		.byte	0x3
 819 00bd 00       		.byte	0
 820 00be 09       		.uleb128 0x9
 821 00bf A1010000 		.4byte	.LASF20
 822 00c3 01       		.byte	0x1
 823 00c4 5B       		.byte	0x5b
 824 00c5 00000000 		.4byte	.LFB63
 825 00c9 30000000 		.4byte	.LFE63-.LFB63
 826 00cd 01       		.uleb128 0x1
 827 00ce 9C       		.byte	0x9c
 828 00cf 0A       		.uleb128 0xa
 829 00d0 69010000 		.4byte	.LASF16
 830 00d4 01       		.byte	0x1
 831 00d5 72       		.byte	0x72
 832 00d6 68000000 		.4byte	0x68
 833 00da 00000000 		.4byte	.LFB64
 834 00de 10020000 		.4byte	.LFE64-.LFB64
 835 00e2 01       		.uleb128 0x1
 836 00e3 9C       		.byte	0x9c
 837 00e4 F7000000 		.4byte	0xf7
 838 00e8 0B       		.uleb128 0xb
 839 00e9 B0020000 		.4byte	.LASF19
 840 00ed 01       		.byte	0x1
 841 00ee 74       		.byte	0x74
 842 00ef AE000000 		.4byte	0xae
 843 00f3 02       		.uleb128 0x2
 844 00f4 91       		.byte	0x91
 845 00f5 74       		.sleb128 -12
 846 00f6 00       		.byte	0
 847 00f7 0C       		.uleb128 0xc
 848 00f8 95020000 		.4byte	.LASF17
 849 00fc 01       		.byte	0x1
 850 00fd 4301     		.2byte	0x143
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 24


 851 00ff 00000000 		.4byte	.LFB65
 852 0103 68000000 		.4byte	.LFE65-.LFB65
 853 0107 01       		.uleb128 0x1
 854 0108 9C       		.byte	0x9c
 855 0109 2C010000 		.4byte	0x12c
 856 010d 0D       		.uleb128 0xd
 857 010e 4F010000 		.4byte	.LASF18
 858 0112 01       		.byte	0x1
 859 0113 4301     		.2byte	0x143
 860 0115 81000000 		.4byte	0x81
 861 0119 02       		.uleb128 0x2
 862 011a 91       		.byte	0x91
 863 011b 77       		.sleb128 -9
 864 011c 0D       		.uleb128 0xd
 865 011d B0020000 		.4byte	.LASF19
 866 0121 01       		.byte	0x1
 867 0122 4301     		.2byte	0x143
 868 0124 2C010000 		.4byte	0x12c
 869 0128 02       		.uleb128 0x2
 870 0129 91       		.byte	0x91
 871 012a 70       		.sleb128 -16
 872 012b 00       		.byte	0
 873 012c 0E       		.uleb128 0xe
 874 012d 04       		.byte	0x4
 875 012e 81000000 		.4byte	0x81
 876 0132 0F       		.uleb128 0xf
 877 0133 AA010000 		.4byte	.LASF21
 878 0137 01       		.byte	0x1
 879 0138 6201     		.2byte	0x162
 880 013a 00000000 		.4byte	.LFB66
 881 013e 0C000000 		.4byte	.LFE66-.LFB66
 882 0142 01       		.uleb128 0x1
 883 0143 9C       		.byte	0x9c
 884 0144 0F       		.uleb128 0xf
 885 0145 5A030000 		.4byte	.LASF22
 886 0149 01       		.byte	0x1
 887 014a 6F01     		.2byte	0x16f
 888 014c 00000000 		.4byte	.LFB67
 889 0150 0C000000 		.4byte	.LFE67-.LFB67
 890 0154 01       		.uleb128 0x1
 891 0155 9C       		.byte	0x9c
 892 0156 0F       		.uleb128 0xf
 893 0157 6E010000 		.4byte	.LASF23
 894 015b 01       		.byte	0x1
 895 015c 7D01     		.2byte	0x17d
 896 015e 00000000 		.4byte	.LFB68
 897 0162 0C000000 		.4byte	.LFE68-.LFB68
 898 0166 01       		.uleb128 0x1
 899 0167 9C       		.byte	0x9c
 900 0168 0F       		.uleb128 0xf
 901 0169 01020000 		.4byte	.LASF24
 902 016d 01       		.byte	0x1
 903 016e 8A01     		.2byte	0x18a
 904 0170 00000000 		.4byte	.LFB69
 905 0174 0C000000 		.4byte	.LFE69-.LFB69
 906 0178 01       		.uleb128 0x1
 907 0179 9C       		.byte	0x9c
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 25


 908 017a 0F       		.uleb128 0xf
 909 017b 26020000 		.4byte	.LASF25
 910 017f 01       		.byte	0x1
 911 0180 9801     		.2byte	0x198
 912 0182 00000000 		.4byte	.LFB70
 913 0186 0C000000 		.4byte	.LFE70-.LFB70
 914 018a 01       		.uleb128 0x1
 915 018b 9C       		.byte	0x9c
 916 018c 0F       		.uleb128 0xf
 917 018d E1000000 		.4byte	.LASF26
 918 0191 01       		.byte	0x1
 919 0192 A601     		.2byte	0x1a6
 920 0194 00000000 		.4byte	.LFB71
 921 0198 0C000000 		.4byte	.LFE71-.LFB71
 922 019c 01       		.uleb128 0x1
 923 019d 9C       		.byte	0x9c
 924 019e 0F       		.uleb128 0xf
 925 019f 34000000 		.4byte	.LASF27
 926 01a3 01       		.byte	0x1
 927 01a4 B801     		.2byte	0x1b8
 928 01a6 00000000 		.4byte	.LFB72
 929 01aa 0C000000 		.4byte	.LFE72-.LFB72
 930 01ae 01       		.uleb128 0x1
 931 01af 9C       		.byte	0x9c
 932 01b0 0F       		.uleb128 0xf
 933 01b1 0C000000 		.4byte	.LASF28
 934 01b5 01       		.byte	0x1
 935 01b6 C601     		.2byte	0x1c6
 936 01b8 00000000 		.4byte	.LFB73
 937 01bc 0C000000 		.4byte	.LFE73-.LFB73
 938 01c0 01       		.uleb128 0x1
 939 01c1 9C       		.byte	0x9c
 940 01c2 10       		.uleb128 0x10
 941 01c3 6A020000 		.4byte	.LASF29
 942 01c7 01       		.byte	0x1
 943 01c8 43       		.byte	0x43
 944 01c9 A2000000 		.4byte	0xa2
 945 01cd 10       		.uleb128 0x10
 946 01ce 7F030000 		.4byte	.LASF30
 947 01d2 01       		.byte	0x1
 948 01d3 44       		.byte	0x44
 949 01d4 A2000000 		.4byte	0xa2
 950 01d8 11       		.uleb128 0x11
 951 01d9 55010000 		.4byte	.LASF31
 952 01dd 05       		.byte	0x5
 953 01de 5506     		.2byte	0x655
 954 01e0 E4010000 		.4byte	0x1e4
 955 01e4 06       		.uleb128 0x6
 956 01e5 76000000 		.4byte	0x76
 957 01e9 07       		.uleb128 0x7
 958 01ea 81000000 		.4byte	0x81
 959 01ee F9010000 		.4byte	0x1f9
 960 01f2 08       		.uleb128 0x8
 961 01f3 A7000000 		.4byte	0xa7
 962 01f7 0D       		.byte	0xd
 963 01f8 00       		.byte	0
 964 01f9 12       		.uleb128 0x12
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 26


 965 01fa 56020000 		.4byte	.LASF32
 966 01fe 01       		.byte	0x1
 967 01ff 35       		.byte	0x35
 968 0200 0A020000 		.4byte	0x20a
 969 0204 05       		.uleb128 0x5
 970 0205 03       		.byte	0x3
 971 0206 00000000 		.4byte	MIDI_IDENTITY_REPLY
 972 020a 13       		.uleb128 0x13
 973 020b E9010000 		.4byte	0x1e9
 974 020f 12       		.uleb128 0x12
 975 0210 7D020000 		.4byte	.LASF33
 976 0214 01       		.byte	0x1
 977 0215 46       		.byte	0x46
 978 0216 A2000000 		.4byte	0xa2
 979 021a 05       		.uleb128 0x5
 980 021b 03       		.byte	0x3
 981 021c 00000000 		.4byte	usbActivityCounter
 982 0220 12       		.uleb128 0x12
 983 0221 F4010000 		.4byte	.LASF34
 984 0225 01       		.byte	0x1
 985 0226 48       		.byte	0x48
 986 0227 81000000 		.4byte	0x81
 987 022b 05       		.uleb128 0x5
 988 022c 03       		.byte	0x3
 989 022d 00000000 		.4byte	csButtStates
 990 0231 12       		.uleb128 0x12
 991 0232 92030000 		.4byte	.LASF35
 992 0236 01       		.byte	0x1
 993 0237 49       		.byte	0x49
 994 0238 81000000 		.4byte	0x81
 995 023c 05       		.uleb128 0x5
 996 023d 03       		.byte	0x3
 997 023e 00000000 		.4byte	csButtStatesOld
 998 0242 12       		.uleb128 0x12
 999 0243 94010000 		.4byte	.LASF36
 1000 0247 01       		.byte	0x1
 1001 0248 4A       		.byte	0x4a
 1002 0249 81000000 		.4byte	0x81
 1003 024d 05       		.uleb128 0x5
 1004 024e 03       		.byte	0x3
 1005 024f 00000000 		.4byte	csButtChange
 1006 0253 12       		.uleb128 0x12
 1007 0254 00000000 		.4byte	.LASF37
 1008 0258 01       		.byte	0x1
 1009 0259 4B       		.byte	0x4b
 1010 025a 81000000 		.4byte	0x81
 1011 025e 05       		.uleb128 0x5
 1012 025f 03       		.byte	0x3
 1013 0260 00000000 		.4byte	inqFlagsOld
 1014 0264 00       		.byte	0
 1015              		.section	.debug_abbrev,"",%progbits
 1016              	.Ldebug_abbrev0:
 1017 0000 01       		.uleb128 0x1
 1018 0001 11       		.uleb128 0x11
 1019 0002 01       		.byte	0x1
 1020 0003 25       		.uleb128 0x25
 1021 0004 0E       		.uleb128 0xe
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 27


 1022 0005 13       		.uleb128 0x13
 1023 0006 0B       		.uleb128 0xb
 1024 0007 03       		.uleb128 0x3
 1025 0008 0E       		.uleb128 0xe
 1026 0009 1B       		.uleb128 0x1b
 1027 000a 0E       		.uleb128 0xe
 1028 000b 55       		.uleb128 0x55
 1029 000c 17       		.uleb128 0x17
 1030 000d 11       		.uleb128 0x11
 1031 000e 01       		.uleb128 0x1
 1032 000f 10       		.uleb128 0x10
 1033 0010 17       		.uleb128 0x17
 1034 0011 00       		.byte	0
 1035 0012 00       		.byte	0
 1036 0013 02       		.uleb128 0x2
 1037 0014 24       		.uleb128 0x24
 1038 0015 00       		.byte	0
 1039 0016 0B       		.uleb128 0xb
 1040 0017 0B       		.uleb128 0xb
 1041 0018 3E       		.uleb128 0x3e
 1042 0019 0B       		.uleb128 0xb
 1043 001a 03       		.uleb128 0x3
 1044 001b 0E       		.uleb128 0xe
 1045 001c 00       		.byte	0
 1046 001d 00       		.byte	0
 1047 001e 03       		.uleb128 0x3
 1048 001f 16       		.uleb128 0x16
 1049 0020 00       		.byte	0
 1050 0021 03       		.uleb128 0x3
 1051 0022 0E       		.uleb128 0xe
 1052 0023 3A       		.uleb128 0x3a
 1053 0024 0B       		.uleb128 0xb
 1054 0025 3B       		.uleb128 0x3b
 1055 0026 0B       		.uleb128 0xb
 1056 0027 49       		.uleb128 0x49
 1057 0028 13       		.uleb128 0x13
 1058 0029 00       		.byte	0
 1059 002a 00       		.byte	0
 1060 002b 04       		.uleb128 0x4
 1061 002c 24       		.uleb128 0x24
 1062 002d 00       		.byte	0
 1063 002e 0B       		.uleb128 0xb
 1064 002f 0B       		.uleb128 0xb
 1065 0030 3E       		.uleb128 0x3e
 1066 0031 0B       		.uleb128 0xb
 1067 0032 03       		.uleb128 0x3
 1068 0033 08       		.uleb128 0x8
 1069 0034 00       		.byte	0
 1070 0035 00       		.byte	0
 1071 0036 05       		.uleb128 0x5
 1072 0037 16       		.uleb128 0x16
 1073 0038 00       		.byte	0
 1074 0039 03       		.uleb128 0x3
 1075 003a 0E       		.uleb128 0xe
 1076 003b 3A       		.uleb128 0x3a
 1077 003c 0B       		.uleb128 0xb
 1078 003d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 28


 1079 003e 05       		.uleb128 0x5
 1080 003f 49       		.uleb128 0x49
 1081 0040 13       		.uleb128 0x13
 1082 0041 00       		.byte	0
 1083 0042 00       		.byte	0
 1084 0043 06       		.uleb128 0x6
 1085 0044 35       		.uleb128 0x35
 1086 0045 00       		.byte	0
 1087 0046 49       		.uleb128 0x49
 1088 0047 13       		.uleb128 0x13
 1089 0048 00       		.byte	0
 1090 0049 00       		.byte	0
 1091 004a 07       		.uleb128 0x7
 1092 004b 01       		.uleb128 0x1
 1093 004c 01       		.byte	0x1
 1094 004d 49       		.uleb128 0x49
 1095 004e 13       		.uleb128 0x13
 1096 004f 01       		.uleb128 0x1
 1097 0050 13       		.uleb128 0x13
 1098 0051 00       		.byte	0
 1099 0052 00       		.byte	0
 1100 0053 08       		.uleb128 0x8
 1101 0054 21       		.uleb128 0x21
 1102 0055 00       		.byte	0
 1103 0056 49       		.uleb128 0x49
 1104 0057 13       		.uleb128 0x13
 1105 0058 2F       		.uleb128 0x2f
 1106 0059 0B       		.uleb128 0xb
 1107 005a 00       		.byte	0
 1108 005b 00       		.byte	0
 1109 005c 09       		.uleb128 0x9
 1110 005d 2E       		.uleb128 0x2e
 1111 005e 00       		.byte	0
 1112 005f 3F       		.uleb128 0x3f
 1113 0060 19       		.uleb128 0x19
 1114 0061 03       		.uleb128 0x3
 1115 0062 0E       		.uleb128 0xe
 1116 0063 3A       		.uleb128 0x3a
 1117 0064 0B       		.uleb128 0xb
 1118 0065 3B       		.uleb128 0x3b
 1119 0066 0B       		.uleb128 0xb
 1120 0067 27       		.uleb128 0x27
 1121 0068 19       		.uleb128 0x19
 1122 0069 11       		.uleb128 0x11
 1123 006a 01       		.uleb128 0x1
 1124 006b 12       		.uleb128 0x12
 1125 006c 06       		.uleb128 0x6
 1126 006d 40       		.uleb128 0x40
 1127 006e 18       		.uleb128 0x18
 1128 006f 9642     		.uleb128 0x2116
 1129 0071 19       		.uleb128 0x19
 1130 0072 00       		.byte	0
 1131 0073 00       		.byte	0
 1132 0074 0A       		.uleb128 0xa
 1133 0075 2E       		.uleb128 0x2e
 1134 0076 01       		.byte	0x1
 1135 0077 3F       		.uleb128 0x3f
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 29


 1136 0078 19       		.uleb128 0x19
 1137 0079 03       		.uleb128 0x3
 1138 007a 0E       		.uleb128 0xe
 1139 007b 3A       		.uleb128 0x3a
 1140 007c 0B       		.uleb128 0xb
 1141 007d 3B       		.uleb128 0x3b
 1142 007e 0B       		.uleb128 0xb
 1143 007f 49       		.uleb128 0x49
 1144 0080 13       		.uleb128 0x13
 1145 0081 11       		.uleb128 0x11
 1146 0082 01       		.uleb128 0x1
 1147 0083 12       		.uleb128 0x12
 1148 0084 06       		.uleb128 0x6
 1149 0085 40       		.uleb128 0x40
 1150 0086 18       		.uleb128 0x18
 1151 0087 9642     		.uleb128 0x2116
 1152 0089 19       		.uleb128 0x19
 1153 008a 01       		.uleb128 0x1
 1154 008b 13       		.uleb128 0x13
 1155 008c 00       		.byte	0
 1156 008d 00       		.byte	0
 1157 008e 0B       		.uleb128 0xb
 1158 008f 34       		.uleb128 0x34
 1159 0090 00       		.byte	0
 1160 0091 03       		.uleb128 0x3
 1161 0092 0E       		.uleb128 0xe
 1162 0093 3A       		.uleb128 0x3a
 1163 0094 0B       		.uleb128 0xb
 1164 0095 3B       		.uleb128 0x3b
 1165 0096 0B       		.uleb128 0xb
 1166 0097 49       		.uleb128 0x49
 1167 0098 13       		.uleb128 0x13
 1168 0099 02       		.uleb128 0x2
 1169 009a 18       		.uleb128 0x18
 1170 009b 00       		.byte	0
 1171 009c 00       		.byte	0
 1172 009d 0C       		.uleb128 0xc
 1173 009e 2E       		.uleb128 0x2e
 1174 009f 01       		.byte	0x1
 1175 00a0 3F       		.uleb128 0x3f
 1176 00a1 19       		.uleb128 0x19
 1177 00a2 03       		.uleb128 0x3
 1178 00a3 0E       		.uleb128 0xe
 1179 00a4 3A       		.uleb128 0x3a
 1180 00a5 0B       		.uleb128 0xb
 1181 00a6 3B       		.uleb128 0x3b
 1182 00a7 05       		.uleb128 0x5
 1183 00a8 27       		.uleb128 0x27
 1184 00a9 19       		.uleb128 0x19
 1185 00aa 11       		.uleb128 0x11
 1186 00ab 01       		.uleb128 0x1
 1187 00ac 12       		.uleb128 0x12
 1188 00ad 06       		.uleb128 0x6
 1189 00ae 40       		.uleb128 0x40
 1190 00af 18       		.uleb128 0x18
 1191 00b0 9642     		.uleb128 0x2116
 1192 00b2 19       		.uleb128 0x19
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 30


 1193 00b3 01       		.uleb128 0x1
 1194 00b4 13       		.uleb128 0x13
 1195 00b5 00       		.byte	0
 1196 00b6 00       		.byte	0
 1197 00b7 0D       		.uleb128 0xd
 1198 00b8 05       		.uleb128 0x5
 1199 00b9 00       		.byte	0
 1200 00ba 03       		.uleb128 0x3
 1201 00bb 0E       		.uleb128 0xe
 1202 00bc 3A       		.uleb128 0x3a
 1203 00bd 0B       		.uleb128 0xb
 1204 00be 3B       		.uleb128 0x3b
 1205 00bf 05       		.uleb128 0x5
 1206 00c0 49       		.uleb128 0x49
 1207 00c1 13       		.uleb128 0x13
 1208 00c2 02       		.uleb128 0x2
 1209 00c3 18       		.uleb128 0x18
 1210 00c4 00       		.byte	0
 1211 00c5 00       		.byte	0
 1212 00c6 0E       		.uleb128 0xe
 1213 00c7 0F       		.uleb128 0xf
 1214 00c8 00       		.byte	0
 1215 00c9 0B       		.uleb128 0xb
 1216 00ca 0B       		.uleb128 0xb
 1217 00cb 49       		.uleb128 0x49
 1218 00cc 13       		.uleb128 0x13
 1219 00cd 00       		.byte	0
 1220 00ce 00       		.byte	0
 1221 00cf 0F       		.uleb128 0xf
 1222 00d0 2E       		.uleb128 0x2e
 1223 00d1 00       		.byte	0
 1224 00d2 3F       		.uleb128 0x3f
 1225 00d3 19       		.uleb128 0x19
 1226 00d4 03       		.uleb128 0x3
 1227 00d5 0E       		.uleb128 0xe
 1228 00d6 3A       		.uleb128 0x3a
 1229 00d7 0B       		.uleb128 0xb
 1230 00d8 3B       		.uleb128 0x3b
 1231 00d9 05       		.uleb128 0x5
 1232 00da 27       		.uleb128 0x27
 1233 00db 19       		.uleb128 0x19
 1234 00dc 11       		.uleb128 0x11
 1235 00dd 01       		.uleb128 0x1
 1236 00de 12       		.uleb128 0x12
 1237 00df 06       		.uleb128 0x6
 1238 00e0 40       		.uleb128 0x40
 1239 00e1 18       		.uleb128 0x18
 1240 00e2 9642     		.uleb128 0x2116
 1241 00e4 19       		.uleb128 0x19
 1242 00e5 00       		.byte	0
 1243 00e6 00       		.byte	0
 1244 00e7 10       		.uleb128 0x10
 1245 00e8 34       		.uleb128 0x34
 1246 00e9 00       		.byte	0
 1247 00ea 03       		.uleb128 0x3
 1248 00eb 0E       		.uleb128 0xe
 1249 00ec 3A       		.uleb128 0x3a
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 31


 1250 00ed 0B       		.uleb128 0xb
 1251 00ee 3B       		.uleb128 0x3b
 1252 00ef 0B       		.uleb128 0xb
 1253 00f0 49       		.uleb128 0x49
 1254 00f1 13       		.uleb128 0x13
 1255 00f2 3F       		.uleb128 0x3f
 1256 00f3 19       		.uleb128 0x19
 1257 00f4 3C       		.uleb128 0x3c
 1258 00f5 19       		.uleb128 0x19
 1259 00f6 00       		.byte	0
 1260 00f7 00       		.byte	0
 1261 00f8 11       		.uleb128 0x11
 1262 00f9 34       		.uleb128 0x34
 1263 00fa 00       		.byte	0
 1264 00fb 03       		.uleb128 0x3
 1265 00fc 0E       		.uleb128 0xe
 1266 00fd 3A       		.uleb128 0x3a
 1267 00fe 0B       		.uleb128 0xb
 1268 00ff 3B       		.uleb128 0x3b
 1269 0100 05       		.uleb128 0x5
 1270 0101 49       		.uleb128 0x49
 1271 0102 13       		.uleb128 0x13
 1272 0103 3F       		.uleb128 0x3f
 1273 0104 19       		.uleb128 0x19
 1274 0105 3C       		.uleb128 0x3c
 1275 0106 19       		.uleb128 0x19
 1276 0107 00       		.byte	0
 1277 0108 00       		.byte	0
 1278 0109 12       		.uleb128 0x12
 1279 010a 34       		.uleb128 0x34
 1280 010b 00       		.byte	0
 1281 010c 03       		.uleb128 0x3
 1282 010d 0E       		.uleb128 0xe
 1283 010e 3A       		.uleb128 0x3a
 1284 010f 0B       		.uleb128 0xb
 1285 0110 3B       		.uleb128 0x3b
 1286 0111 0B       		.uleb128 0xb
 1287 0112 49       		.uleb128 0x49
 1288 0113 13       		.uleb128 0x13
 1289 0114 3F       		.uleb128 0x3f
 1290 0115 19       		.uleb128 0x19
 1291 0116 02       		.uleb128 0x2
 1292 0117 18       		.uleb128 0x18
 1293 0118 00       		.byte	0
 1294 0119 00       		.byte	0
 1295 011a 13       		.uleb128 0x13
 1296 011b 26       		.uleb128 0x26
 1297 011c 00       		.byte	0
 1298 011d 49       		.uleb128 0x49
 1299 011e 13       		.uleb128 0x13
 1300 011f 00       		.byte	0
 1301 0120 00       		.byte	0
 1302 0121 00       		.byte	0
 1303              		.section	.debug_aranges,"",%progbits
 1304 0000 6C000000 		.4byte	0x6c
 1305 0004 0200     		.2byte	0x2
 1306 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 32


 1307 000a 04       		.byte	0x4
 1308 000b 00       		.byte	0
 1309 000c 0000     		.2byte	0
 1310 000e 0000     		.2byte	0
 1311 0010 00000000 		.4byte	.LFB63
 1312 0014 30000000 		.4byte	.LFE63-.LFB63
 1313 0018 00000000 		.4byte	.LFB64
 1314 001c 10020000 		.4byte	.LFE64-.LFB64
 1315 0020 00000000 		.4byte	.LFB65
 1316 0024 68000000 		.4byte	.LFE65-.LFB65
 1317 0028 00000000 		.4byte	.LFB66
 1318 002c 0C000000 		.4byte	.LFE66-.LFB66
 1319 0030 00000000 		.4byte	.LFB67
 1320 0034 0C000000 		.4byte	.LFE67-.LFB67
 1321 0038 00000000 		.4byte	.LFB68
 1322 003c 0C000000 		.4byte	.LFE68-.LFB68
 1323 0040 00000000 		.4byte	.LFB69
 1324 0044 0C000000 		.4byte	.LFE69-.LFB69
 1325 0048 00000000 		.4byte	.LFB70
 1326 004c 0C000000 		.4byte	.LFE70-.LFB70
 1327 0050 00000000 		.4byte	.LFB71
 1328 0054 0C000000 		.4byte	.LFE71-.LFB71
 1329 0058 00000000 		.4byte	.LFB72
 1330 005c 0C000000 		.4byte	.LFE72-.LFB72
 1331 0060 00000000 		.4byte	.LFB73
 1332 0064 0C000000 		.4byte	.LFE73-.LFB73
 1333 0068 00000000 		.4byte	0
 1334 006c 00000000 		.4byte	0
 1335              		.section	.debug_ranges,"",%progbits
 1336              	.Ldebug_ranges0:
 1337 0000 00000000 		.4byte	.LFB63
 1338 0004 30000000 		.4byte	.LFE63
 1339 0008 00000000 		.4byte	.LFB64
 1340 000c 10020000 		.4byte	.LFE64
 1341 0010 00000000 		.4byte	.LFB65
 1342 0014 68000000 		.4byte	.LFE65
 1343 0018 00000000 		.4byte	.LFB66
 1344 001c 0C000000 		.4byte	.LFE66
 1345 0020 00000000 		.4byte	.LFB67
 1346 0024 0C000000 		.4byte	.LFE67
 1347 0028 00000000 		.4byte	.LFB68
 1348 002c 0C000000 		.4byte	.LFE68
 1349 0030 00000000 		.4byte	.LFB69
 1350 0034 0C000000 		.4byte	.LFE69
 1351 0038 00000000 		.4byte	.LFB70
 1352 003c 0C000000 		.4byte	.LFE70
 1353 0040 00000000 		.4byte	.LFB71
 1354 0044 0C000000 		.4byte	.LFE71
 1355 0048 00000000 		.4byte	.LFB72
 1356 004c 0C000000 		.4byte	.LFE72
 1357 0050 00000000 		.4byte	.LFB73
 1358 0054 0C000000 		.4byte	.LFE73
 1359 0058 00000000 		.4byte	0
 1360 005c 00000000 		.4byte	0
 1361              		.section	.debug_line,"",%progbits
 1362              	.Ldebug_line0:
 1363 0000 5B020000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 33


 1363      02004901 
 1363      00000201 
 1363      FB0E0D00 
 1363      01010101 
 1364              	.LASF37:
 1365 0000 696E7146 		.ascii	"inqFlagsOld\000"
 1365      6C616773 
 1365      4F6C6400 
 1366              	.LASF28:
 1367 000c 4D494449 		.ascii	"MIDI2_UART_RXISR_ExitCallback\000"
 1367      325F5541 
 1367      52545F52 
 1367      58495352 
 1367      5F457869 
 1368              	.LASF9:
 1369 002a 5F5F696E 		.ascii	"__int32_t\000"
 1369      7433325F 
 1369      7400
 1370              	.LASF27:
 1371 0034 4D494449 		.ascii	"MIDI2_UART_RXISR_EntryCallback\000"
 1371      325F5541 
 1371      52545F52 
 1371      58495352 
 1371      5F456E74 
 1372              	.LASF38:
 1373 0053 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1373      4320342E 
 1373      392E3320 
 1373      32303135 
 1373      30333033 
 1374 0086 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1374      20726576 
 1374      6973696F 
 1374      6E203232 
 1374      31323230 
 1375 00b9 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1375      66756E63 
 1375      74696F6E 
 1375      2D736563 
 1375      74696F6E 
 1376              	.LASF26:
 1377 00e1 4D494449 		.ascii	"MIDI1_UART_RXISR_ExitCallback\000"
 1377      315F5541 
 1377      52545F52 
 1377      58495352 
 1377      5F457869 
 1378              	.LASF12:
 1379 00ff 666C6F61 		.ascii	"float\000"
 1379      7400
 1380              	.LASF6:
 1381 0105 6C6F6E67 		.ascii	"long long int\000"
 1381      206C6F6E 
 1381      6720696E 
 1381      7400
 1382              	.LASF1:
 1383 0113 756E7369 		.ascii	"unsigned char\000"
 1383      676E6564 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 34


 1383      20636861 
 1383      7200
 1384              	.LASF39:
 1385 0121 2E5C6D61 		.ascii	".\\main.c\000"
 1385      696E2E63 
 1385      00
 1386              	.LASF5:
 1387 012a 6C6F6E67 		.ascii	"long unsigned int\000"
 1387      20756E73 
 1387      69676E65 
 1387      6420696E 
 1387      7400
 1388              	.LASF3:
 1389 013c 73686F72 		.ascii	"short unsigned int\000"
 1389      7420756E 
 1389      7369676E 
 1389      65642069 
 1389      6E7400
 1390              	.LASF18:
 1391 014f 6361626C 		.ascii	"cable\000"
 1391      6500
 1392              	.LASF31:
 1393 0155 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1393      52784275 
 1393      66666572 
 1393      00
 1394              	.LASF13:
 1395 0162 646F7562 		.ascii	"double\000"
 1395      6C6500
 1396              	.LASF16:
 1397 0169 6D61696E 		.ascii	"main\000"
 1397      00
 1398              	.LASF23:
 1399 016e 5553425F 		.ascii	"USB_MIDI2_ProcessUsbOut_EntryCallback\000"
 1399      4D494449 
 1399      325F5072 
 1399      6F636573 
 1399      73557362 
 1400              	.LASF36:
 1401 0194 63734275 		.ascii	"csButtChange\000"
 1401      74744368 
 1401      616E6765 
 1401      00
 1402              	.LASF20:
 1403 01a1 536C6565 		.ascii	"SleepIsr\000"
 1403      70497372 
 1403      00
 1404              	.LASF21:
 1405 01aa 5553425F 		.ascii	"USB_MIDI1_ProcessUsbOut_EntryCallback\000"
 1405      4D494449 
 1405      315F5072 
 1405      6F636573 
 1405      73557362 
 1406              	.LASF8:
 1407 01d0 756E7369 		.ascii	"unsigned int\000"
 1407      676E6564 
 1407      20696E74 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 35


 1407      00
 1408              	.LASF7:
 1409 01dd 6C6F6E67 		.ascii	"long long unsigned int\000"
 1409      206C6F6E 
 1409      6720756E 
 1409      7369676E 
 1409      65642069 
 1410              	.LASF34:
 1411 01f4 63734275 		.ascii	"csButtStates\000"
 1411      74745374 
 1411      61746573 
 1411      00
 1412              	.LASF24:
 1413 0201 5553425F 		.ascii	"USB_MIDI2_ProcessUsbOut_ExitCallback\000"
 1413      4D494449 
 1413      325F5072 
 1413      6F636573 
 1413      73557362 
 1414              	.LASF25:
 1415 0226 4D494449 		.ascii	"MIDI1_UART_RXISR_EntryCallback\000"
 1415      315F5541 
 1415      52545F52 
 1415      58495352 
 1415      5F456E74 
 1416              	.LASF10:
 1417 0245 696E7433 		.ascii	"int32_t\000"
 1417      325F7400 
 1418              	.LASF15:
 1419 024d 73697A65 		.ascii	"sizetype\000"
 1419      74797065 
 1419      00
 1420              	.LASF32:
 1421 0256 4D494449 		.ascii	"MIDI_IDENTITY_REPLY\000"
 1421      5F494445 
 1421      4E544954 
 1421      595F5245 
 1421      504C5900 
 1422              	.LASF29:
 1423 026a 5553425F 		.ascii	"USB_MIDI1_InqFlags\000"
 1423      4D494449 
 1423      315F496E 
 1423      71466C61 
 1423      677300
 1424              	.LASF33:
 1425 027d 75736241 		.ascii	"usbActivityCounter\000"
 1425      63746976 
 1425      69747943 
 1425      6F756E74 
 1425      657200
 1426              	.LASF14:
 1427 0290 63686172 		.ascii	"char\000"
 1427      00
 1428              	.LASF17:
 1429 0295 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 1429      63616C6C 
 1429      6261636B 
 1429      4C6F6361 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccRGtJRW.s 			page 36


 1429      6C4D6964 
 1430              	.LASF19:
 1431 02b0 6D696469 		.ascii	"midiMsg\000"
 1431      4D736700 
 1432              	.LASF2:
 1433 02b8 73686F72 		.ascii	"short int\000"
 1433      7420696E 
 1433      7400
 1434              	.LASF40:
 1435 02c2 433A5C55 		.ascii	"C:\\Users\\Lukas Creutzburg\\Documents\\GitHub\\PSo"
 1435      73657273 
 1435      5C4C756B 
 1435      61732043 
 1435      72657574 
 1436 02f0 43354C50 		.ascii	"C5LP-freeDSP-USB-Port\\PSoC_freeDSP_USB_Port\\USBFS"
 1436      2D667265 
 1436      65445350 
 1436      2D555342 
 1436      2D506F72 
 1437 0321 5F4D4944 		.ascii	"_MIDI_PSoC3_5LP_Example.cydsn\000"
 1437      495F5053 
 1437      6F43335F 
 1437      354C505F 
 1437      4578616D 
 1438              	.LASF11:
 1439 033f 75696E74 		.ascii	"uint8\000"
 1439      3800
 1440              	.LASF4:
 1441 0345 6C6F6E67 		.ascii	"long int\000"
 1441      20696E74 
 1441      00
 1442              	.LASF0:
 1443 034e 7369676E 		.ascii	"signed char\000"
 1443      65642063 
 1443      68617200 
 1444              	.LASF22:
 1445 035a 5553425F 		.ascii	"USB_MIDI1_ProcessUsbOut_ExitCallback\000"
 1445      4D494449 
 1445      315F5072 
 1445      6F636573 
 1445      73557362 
 1446              	.LASF30:
 1447 037f 5553425F 		.ascii	"USB_MIDI2_InqFlags\000"
 1447      4D494449 
 1447      325F496E 
 1447      71466C61 
 1447      677300
 1448              	.LASF35:
 1449 0392 63734275 		.ascii	"csButtStatesOld\000"
 1449      74745374 
 1449      61746573 
 1449      4F6C6400 
 1450              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
